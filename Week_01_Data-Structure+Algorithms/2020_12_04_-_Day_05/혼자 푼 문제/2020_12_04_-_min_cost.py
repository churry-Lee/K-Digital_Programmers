# 배상 비용 최소화
'''
문제 설명

N 시간 동안 works 배열에 있는 작업 중 한 가지를 선택해 
1 만큼 작업 처리가 가능하다.
이때, N 시간 동안 작업을 하여 만들 수 있는 최소 비용을 계산하라

    + N: 작업 시간
    + works: 각 일에 대한 작업량이 담긴 배열
    + *return: 남아 있는 배열의 최소 비용*

제한 사항
* N: 1,000,000 이하의 자연수
* works의 크기: 1,000 이하의 자연수
* 각 일에 대한 작업량: 1,000 이하의 자연수

ex)
N = 4
works = [4, 3, 3]
* 4 작업에 대해 2 만큼 처리
* 3 작업에 대해 1 만큼 처리
* 3 작업에 대해 1 만큼 처리

remain = [2, 2, 2]

return (2**2) + (2**2) + (2**2) = 12
'''

# N = 4
# works = [4, 3, 3]
# # return 12

N = 10
works = [3, 3, 3]
# return 17

# 우선 순위 큐로 풀이
# 최대값을 우선으로 연산
# 배열을 오름 차순으로 정렬(마지막 원소를 반환하는 것이 앞을 반환 하는 것보다 빠르기 때문)
# 

def solution(N, works):
    answer = 0

    # 작업 시간이 남아 있는 동안 반복문 실행
    while N > 0:
        # works 배열을 오름차순으로 정렬
        works.sort()
        # 마지막 원소가 0 보다 클 경우에 실행
        if works[-1] > 0:
            # 마지막 원소에서 작업 1을 빼주고 다시 추가
            works.append(works.pop() - 1)
        # 더 이상 작업할 것이 남아있지 않다면 반복문 종료
        else:
            break
        # 남은 작업 시간 갱신
        N -= 1
    # 남은 작업량에 대한 최소 비용 계산
    for i in works:
        answer += (i**2)

    return answer

print(solution(N, works))